generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Developer {
  developerId   String           @id @default(dbgenerated("uuid_generate_v4()")) @map("developer_id") @db.Uuid
  developerName String           @map("developer_name") @db.VarChar(255)
  createdAt     DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  skills        DeveloperSkill[]
  tasks         Task[]           @relation("DeveloperTasks")

  @@map("developers")
}

model Skill {
  skillId         Int              @id @default(autoincrement()) @map("skill_id")
  skillName       String           @unique @map("skill_name") @db.VarChar(255)
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  developerSkills DeveloperSkill[]
  taskSkills      TaskSkill[]

  @@map("skills")
}

model TaskStatus {
  statusId   Int      @id @default(autoincrement()) @map("status_id")
  statusName String   @unique @map("status_name") @db.VarChar(50)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  tasks      Task[]

  @@map("task_statuses")
}

model Task {
  taskId       String      @id @default(dbgenerated("uuid_generate_v4()")) @map("task_id") @db.Uuid
  title        String
  statusId     Int         @map("status_id")
  developerId  String?     @map("developer_id") @db.Uuid
  parentTaskId String?     @map("parent_task_id") @db.Uuid
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  skills       TaskSkill[]
  developer    Developer?  @relation("DeveloperTasks", fields: [developerId], references: [developerId], onUpdate: NoAction, map: "fk_developer")
  parent       Task?       @relation("TaskHierarchy", fields: [parentTaskId], references: [taskId], onDelete: Cascade, onUpdate: NoAction, map: "fk_parent_task")
  children     Task[]      @relation("TaskHierarchy")
  status       TaskStatus  @relation(fields: [statusId], references: [statusId], onUpdate: NoAction, map: "fk_status")

  @@map("tasks")
}

model DeveloperSkill {
  developerId String    @map("developer_id") @db.Uuid
  skillId     Int       @map("skill_id")
  developer   Developer @relation(fields: [developerId], references: [developerId], onDelete: Cascade, onUpdate: NoAction, map: "fk_dev_skill_developer")
  skill       Skill     @relation(fields: [skillId], references: [skillId], onDelete: Cascade, onUpdate: NoAction, map: "fk_dev_skill_skill")

  @@id([developerId, skillId])
  @@map("developer_skills")
}

model TaskSkill {
  taskId  String @map("task_id") @db.Uuid
  skillId Int    @map("skill_id")
  skill   Skill  @relation(fields: [skillId], references: [skillId], onDelete: Cascade, onUpdate: NoAction, map: "fk_task_skill_skill")
  task    Task   @relation(fields: [taskId], references: [taskId], onDelete: Cascade, onUpdate: NoAction, map: "fk_task_skill_task")

  @@id([taskId, skillId])
  @@map("task_skills")
}

model data_seeds {
  id     String    @id
  run_at DateTime? @default(now()) @db.Timestamptz(6)
}

model schema_migrations {
  id     String    @id
  run_at DateTime? @default(now()) @db.Timestamptz(6)
}
